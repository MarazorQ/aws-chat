service: ws-chat-lambda
useDotenv: true
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs16.x
  region: us-east-1
  iamRoleStatements: # permissions for all of your functions can be set here
    - Effect: Allow
      Action: # Gives permission to DynamoDB tables in a specific region
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchGetItem
      Resource: 
        - ${env:DYNAMO_USERS_TABLE_ARN}
        - ${env:DYNAMO_CHAT_TABLE_ARN}
        - ${env:DYNAMO_CHAT_TABLE_ARN}/index/*
    - Effect: Allow
      Action: # Gives permission to Cognito in a specific region
        - cognito-idp:AdminInitiateAuth
        - cognito-idp:AdminCreateUser
        - cognito-idp:AdminGetUser
        - cognito-idp:AdminSetUserPassword
        - cognito-idp:DescribeUserPoolClien
        - cognito-idp:AdminRespondToAuthChallenge
      Resource: ${env:COGNITO_USERS_POOL_ARN}

custom:
  functionsBasePath: src/functions

functions:
  registration:
    handler: auth/registration.handler
    events:
      - http:
          path: registration
          method: post
          request:
            schemas:
              application/json:
                schema: ${file(src/models/create_user_model.json)}
                name: UserCreateModel
                description: 'Validation model for Creating Users'
    environment:
      DYNAMO_USERS_TABLE_NAME: ${env:DYNAMO_USERS_TABLE_NAME}
      COGNITO_CLIENT_ID: ${env:COGNITO_CLIENT_ID}
  confirmRegistration:
    handler: auth/confirmRegistration.handler
    events:
      - http:
          path: confirmRegistration
          method: post
          request:
            schemas:
              application/json:
                schema: ${file(src/models/confirm_registration.json)}
                name: UserConfirmRegistrationModel
                description: 'Validation model for Confirm Registration Users'
    environment:
      DYNAMO_USERS_TABLE_NAME: ${env:DYNAMO_USERS_TABLE_NAME}
      COGNITO_CLIENT_ID: ${env:COGNITO_CLIENT_ID}
  resendActivationCode:
    handler: auth/resendActivationCode.handler
    events:
      - http:
          path: resendActivationCode/{userId}
          method: get
          request:
            parameters:
              paths:
                userId: true
    environment:
      COGNITO_CLIENT_ID: ${env:COGNITO_CLIENT_ID}
      COGNITO_USERS_POOL_ID: ${env:COGNITO_USERS_POOL_ID}
  forgotPassword:
    handler: password-recovery/forgotPassword.handler
    events:
      - http:
          path: forgotPassword
          method: post
          request:
            schemas:
              application/json:
                schema: ${file(src/models/forgot_password.json)}
                name: ForgotPasswordModel
                description: 'Validation model for Forgot Password Users'
    environment:
      COGNITO_CLIENT_ID: ${env:COGNITO_CLIENT_ID}
  confirmForgotPassword:
    handler: password-recovery/confirmForgotPassword.handler
    events:
      - http:
          path: confirmForgotPassword
          method: post
          request:
            schemas:
              application/json:
                schema: ${file(src/models/confirm_forgot_password.json)}
                name: ConfirmForgotPasswordModel
                description: 'Validation model for Confirm Forgot Password Users'
    environment:
      COGNITO_CLIENT_ID: ${env:COGNITO_CLIENT_ID}
  login:
    handler: auth/login.handler
    events:
      - http:
          path: login
          method: post
          request:
            schemas:
              application/json:
                schema: ${file(src/models/login_user_model.json)}
                name: UserLoginModel
                description: 'Validation model for Login Users'
    environment:
      DYNAMO_USERS_TABLE_NAME: ${env:DYNAMO_USERS_TABLE_NAME}
      COGNITO_CLIENT_ID: ${env:COGNITO_CLIENT_ID}
  createRoom:
    handler: room/createRoom.handler
    events:
      - http:
          path: room
          method: post
          request:
            schemas:
              application/json:
                schema: ${file(src/models/create_room.json)}
                name: CreateRoomModel
                description: 'Validation model for Creating Rooms'
          authorizer:
            name: authorizer
            resultTtlInSeconds: 30
            identitySource: method.request.header.Authorization
            type: token
    environment:
      DYNAMO_CHAT_TABLE_NAME: ${env:DYNAMO_CHAT_TABLE_NAME}
      COGNITO_CLIENT_ID: ${env:COGNITO_CLIENT_ID}
  joinToRoom:
    handler: room/joinToRoom.handler
    events:
      - http:
          path: room/join
          method: post
          request:
            schemas:
              application/json:
                schema: ${file(src/models/join_to_room.json)}
                name: JoinToRoomModel
                description: 'Validation model for Joining to Rooms'
          authorizer:
            name: authorizer
            resultTtlInSeconds: 30
            identitySource: method.request.header.Authorization
            type: token
    environment:
      DYNAMO_CHAT_TABLE_NAME: ${env:DYNAMO_CHAT_TABLE_NAME}
      COGNITO_CLIENT_ID: ${env:COGNITO_CLIENT_ID}
  onConnect:
    handler: ws-events/onConnect.handler
    events:
      - websocket:
          route: $connect
          authorizer:
            name: authorizer
            identitySource:
              - 'route.request.querystring.Auth'
    environment:
      DYNAMO_USERS_TABLE_NAME: ${env:DYNAMO_USERS_TABLE_NAME}
      COGNITO_CLIENT_ID: ${env:COGNITO_CLIENT_ID}
      COGNITO_USERS_POOL_ID: ${env:COGNITO_USERS_POOL_ID}
  onDisconnect:
    handler: ws-events/onDisconnect.handler
    events:
      - websocket:
          route: $disconnect
    environment:
      DYNAMO_USERS_TABLE_NAME: ${env:DYNAMO_USERS_TABLE_NAME}
  onSendMessage:
    handler: ws-events/onSendMessage.handler
    events:
      - websocket:
          route: sendMessage
    environment:
      DYNAMO_CHAT_TABLE_NAME: ${env:DYNAMO_CHAT_TABLE_NAME}
      DYNAMO_USERS_TABLE_NAME: ${env:DYNAMO_USERS_TABLE_NAME}
  onDeleteMessage:
    handler: ws-events/onDeleteMessage.handler
    events:
      - websocket:
          route: deleteMessage
    environment:
      DYNAMO_CHAT_TABLE_NAME: ${env:DYNAMO_CHAT_TABLE_NAME}
      DYNAMO_USERS_TABLE_NAME: ${env:DYNAMO_USERS_TABLE_NAME}
  onReadMessage:
    handler: ws-events/onReadMessage.handler
    events:
      - websocket:
          route: readMessage
    environment:
      DYNAMO_CHAT_TABLE_NAME: ${env:DYNAMO_CHAT_TABLE_NAME}
      DYNAMO_USERS_TABLE_NAME: ${env:DYNAMO_USERS_TABLE_NAME}
  onUpdateMessage:
    handler: ws-events/onUpdateMessage.handler
    events:
      - websocket:
          route: updateMessage
    environment:
      DYNAMO_CHAT_TABLE_NAME: ${env:DYNAMO_CHAT_TABLE_NAME}
      DYNAMO_USERS_TABLE_NAME: ${env:DYNAMO_USERS_TABLE_NAME}    
  authorizer:
    handler: auth/authorizer.handler
    environment:
      COGNITO_CLIENT_ID: ${env:COGNITO_CLIENT_ID}
      COGNITO_USERS_POOL_ID: ${env:COGNITO_USERS_POOL_ID}
    description: ${self:service} authorizer

plugins:
  - serverless-offline
  - serverless-offline-lambda
  - serverless-functions-base-path
