service: ws-chat-lambda
useDotenv: true
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs16.x
  region: us-east-1
  iam:
    role:
      statements: # permissions for all of your functions can be set here
        - Effect: Allow
          Action: # Gives permission to DynamoDB tables in a specific region
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: ${env:DYNAMO_USERS_TABLE_ARN}

custom:
  functionsBasePath: src/functions

functions:
  registration:
    handler: registration.handler
    events:
      - http:
          path: registration
          method: post
          request:
            schemas:
              application/json:
                schema: ${file(src/models/create_user_model.json)}
                name: UserCreateModel
                description: 'Validation model for Creating Users'
    environment:
      DYNAMO_USERS_TABLE_NAME: ${env:DYNAMO_USERS_TABLE_NAME}
  login:
    handler: login.handler
    events:
      - http:
          path: login
          method: post
          request:
            schemas:
              application/json:
                schema: ${file(src/models/login_user_model.json)}
                name: UserLoginModel
                description: 'Validation model for Login Users'
    environment:
      DYNAMO_USERS_TABLE_NAME: ${env:DYNAMO_USERS_TABLE_NAME}
      JWT_SECRET: ${env:JWT_SECRET}
  onConnect:
    handler: onConnect.handler
    environment:
      DYNAMO_USERS_TABLE_NAME: ${env:DYNAMO_USERS_TABLE_NAME}
      JWT_SECRET: ${env:JWT_SECRET}
  onDisconnect:
    handler: onDisconnect.handler
    environment:
      DYNAMO_USERS_TABLE_NAME: ${env:DYNAMO_USERS_TABLE_NAME}

plugins:
  - serverless-offline
  - serverless-offline-lambda
  - serverless-functions-base-path
